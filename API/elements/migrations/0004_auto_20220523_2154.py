# Generated by Django 4.0.3 on 2022-05-23 20:54

from django.db import migrations
import csv
import os
from django.db import transaction
from django.db import IntegrityError
from dotenv import load_dotenv

load_dotenv()

def convert(value):
  return value == 'yes'

def load(apps, schema_editor):
  AllElements = apps.get_model('elements', 'AllElements')
  constants = apps.get_model('elements', 'constants')
  
  E = open(os.getenv('element'))
  reader = csv.reader(E)
  for atomic, element, symbol, mass, neuron, proton, electron, period, group, phase, radio, natural, metal, nonmetal, metalloid, kind, radius, negativity, ionization, density, mp, bp, isotope, discoverer, year, heat, shell, valence in reader:
    try:
      with transaction.atomic():
        record = AllElements(atomic_no=atomic, element=element, symbol=symbol, atomic_mass=mass, neurons=neuron, protons=proton, Electrons=electron, period=period, group=group, phase=phase, radioactive=convert(radio), natural=convert(natural), metal=convert(metal), Nonmetal=convert(nonmetal), metalloid=convert(metalloid), kind=kind, atomic_radius=radius, eletro_negativity=negativity, ionization_Energy=ionization, Density=density, Melting_point=mp, Boiling_point=bp, isotopes=isotope, discoverer=discoverer, year=year, specific_heat=heat, shells=shell, valence_electron=valence)
        record.save()
    except IntegrityError:
      record.delete()
     
  E.close()
  
  
  C = open(os.getenv('constant'))
  reader = csv.reader(C)
  for constant, symbol, value in reader:
    try:
      with transaction.atomic():
        record = constants(constant=constant, symbol=symbol, value=value)
        record.save()
    except IntegrityError:
      record.delete()
      
  C.close()
  
  
  
  
  
  
def reverse_load(apps, schema_editor):
  AllElements = apps.get_model('elements', 'AllElements')
  constants = apps.get_model('elements', 'constants')
  AllElements.objects.all().delete()
  constants.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('elements', '0003_allelements_constants'),
    ]

    operations = [
      migrations.RunPython(load, reverse_load),
    ]
